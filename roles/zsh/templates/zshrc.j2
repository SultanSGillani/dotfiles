#!/usr/bin/env zsh

# Dotfiles
export ZSH=${HOME}/dotfiles

# Load the secrets file
if [ -e ${HOME}/.secrets ]; then
     source ${HOME}/.secrets
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/roles/zsh/**/*.zsh)

# load the opts files
for file in ${(M)config_files:#*opts/*.zsh}; do
  source "$file"
done

# Arch Aur
{% if ansible_facts['os_family']|lower == "archlinux" %}
export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib
export MAKEFLAGS="-j9 -l8"
{% endif %}

# Python
export PYTHONSTARTUP="${HOME}/.pyrc.py"

# Gpg2
export GPG_TTY=$(tty)

fast-theme default 2> /dev/null

# Z
export _Z_CMD=z
. $ZSH/roles/z/z.sh
{% if ansible_facts['os_family']|lower == "darwin" %}
export PATH="{{ zsh_path | join(":") }}:{{ zsh_mac_path }}:$PATH"
{% endif %}
{% if ansible_facts['os_family']|lower == "debian" %}
export PATH="{{ zsh_path | join(":") }}:{{ zsh_debian_path }}:$PATH"
{% elif ansible_facts['os_family']|lower == "archlinux" %}
export PATH="{{ zsh_path | join(":") }}:{{ zsh_arch_path }}:$PATH"
{% endif %}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/bin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/bin/google-cloud-sdk/completion.zsh.inc'; fi

##############################################################
# GLOBAL CONFIG
##############################################################

# Theme options

# PROMPT
setopt promptsubst

. ${HOME}/.prompt

# ASDF
. ${HOME}/.asdf/asdf.sh
. ${HOME}/.asdf/plugins/java/set-java-home.sh

asdf current groovy 2>&1 > /dev/null
if [[ "$?" -eq 0 ]]
then
    export GROOVY_HOME=$(asdf where groovy)
fi

### Browser ###
{% if ansible_facts['os_family']|lower == "darwin" %}
export BROWSER='open'
{% endif %}

case $EDITOR in
    nvim) export MANPAGER="nvim +Man!" ;;
     vim) export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man' -\"" ;;
       *) export MANPAGER='less' ;;
esac

### Temporary Files ###

if [[ ! -d "${TMPDIR}" ]]; then
  export TMPDIR="/tmp/${LOGNAME}"
  mkdir -p -m 700 "${TMPDIR}"
fi

TMPPREFIX="${TMPDIR%/}/zsh"

# Homebrew options
{% if ansible_facts['os_family']|lower == "darwin" %}
export HOMEBREW_INSTALL_BADGE="⚗️"
export HOMEBREW_NO_ANALYTICS=1
{% endif %}

# FZF
[[ -f ${HOME}/.fzf.zsh ]] && . ${HOME}/.fzf.zsh
# Base16 {{ base16.theme[default_theme]['scheme_name'] }}
# Author: {{ base16.theme[default_theme]['scheme_author'] }}

_gen_fzf_default_opts() {

local color00='#{{ base16.theme[default_theme]['base00_hex'] }}'
local color01='#{{ base16.theme[default_theme]['base01_hex'] }}'
local color02='#{{ base16.theme[default_theme]['base02_hex'] }}'
local color03='#{{ base16.theme[default_theme]['base03_hex'] }}'
local color04='#{{ base16.theme[default_theme]['base04_hex'] }}'
local color05='#{{ base16.theme[default_theme]['base05_hex'] }}'
local color06='#{{ base16.theme[default_theme]['base06_hex'] }}'
local color07='#{{ base16.theme[default_theme]['base07_hex'] }}'
local color08='#{{ base16.theme[default_theme]['base08_hex'] }}'
local color09='#{{ base16.theme[default_theme]['base09_hex'] }}'
local color0A='#{{ base16.theme[default_theme]['base0A_hex'] }}'
local color0B='#{{ base16.theme[default_theme]['base0B_hex'] }}'
local color0C='#{{ base16.theme[default_theme]['base0C_hex'] }}'
local color0D='#{{ base16.theme[default_theme]['base0D_hex'] }}'
local color0E='#{{ base16.theme[default_theme]['base0E_hex'] }}'
local color0F='#{{ base16.theme[default_theme]['base0F_hex'] }}'

export FZF_DEFAULT_OPTS="
  --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
  --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
  --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
"

}

_gen_fzf_default_opts

export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"
export FZF_TMUX_HEIGHT="30%"

# ssh_agent
eval "$(ssh-agent -s)" >/dev/null
ssh-add 2> /dev/null
ssh-add ${HOME}/.ssh/id_ecdsa_work 2> /dev/null

# load everything but the opts and completion files
for file in ${${config_files:#*opts/*.zsh}:#*completions/*.zsh}; do
  source "$file"
done

WORDCHARS=${WORDCHARS//[\/]}

if (( ! ${+PAGER} )); then
  if (( ${+commands[less]} )); then
    export PAGER=less
  else
    export PAGER=more
  fi
fi

if (( ${+ztermtitle} )); then
  case ${TERM} in
    xterm*|*st)
      precmd() { print -Pn "\e]0;${ztermtitle}\a" }
      precmd  # we execute it once to initialize the window title
      ;;
  esac
fi

# aliases
{% for alias in zsh_aliases %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

{% for alias in multi_aliases %}
{% if alias.alias != '' %}
alias {{ alias.alias }}={{ alias.action }}
{% endif %}
{% endfor %}

{% for alias in zsh_misc_aliases %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

{% for alias in zsh_git_alias %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    alias "$method"="lwp-request -m '$method'"
done

# nmap aliases
{% for alias in zsh_nmap_aliases %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}

# ruby aliases
{% for alias in zsh_ruby_aliases %}
{% if alias.alias != '' %}
alias {{ alias.alias }}='{{ alias.action }}'
{% endif %}
{% endfor %}

# python aliases
{% for alias in zsh_python_aliases %}
{% if alias.alias != '' %}
alias {{ alias.alias }}='{{ alias.action }}'
{% endif %}
{% endfor %}

{% if ansible_facts['os_family']|lower == "archlinux" or  ansible_facts['os_family']|lower == "debian" %}
# linux only aliases
{% for alias in zsh_linux_aliases %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}
{% endif %}

{% if ansible_facts['os_family']|lower == "darwin" %}
# mac only aliases
{% for alias in zsh_mac_aliases %}
{% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
{% endif %}
{% endfor %}
{% endif %}

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

zstyle ':completion:*' insert-tab pending


if [ -f ${HOME}/.zplugin/plugins/tj---git-extras/etc/git-extras-completion.zsh ]; then
    source ${HOME}/.zplugin/plugins/tj---git-extras/etc/git-extras-completion.zsh
fi

unset config_files

##############################################################
# ZPLUGIN https://github.com/zdharma/zplugin
##############################################################

ZPLUGIN_PATH="${HOME}/.zplugin"
if [[ ! -f ${ZPLUGIN_PATH}/bin/zplugin.zsh ]]; then
  if (( $+commands[git] )); then
    git clone https://github.com/zdharma/zplugin.git ${ZPLUGIN_PATH}/bin
  else
    echo 'git not found' >&2
    exit 1
  fi
fi

source ${ZPLUGIN_PATH}/bin/zplugin.zsh

. ${HOME}/zplugin.zsh

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
# shellcheck disable=SC1090
[ -f ${HOME}/.localrc ] && . ${HOME}/.localrc
