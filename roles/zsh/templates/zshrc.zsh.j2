#!/usr/bin/env zsh

zcommand() { zinit ice wait"0b" silent as"command" "${@}"; }
zlight()  { [ -zlight $2 ] && zinit light "${@}" || zinit "${@}"; }
zsnippet() { zinit snippet "${@}"; }
zt()  { zinit depth'3' lucid ${1/#[0-9][a-c]/wait"$1"} "${@:2}"; }
zct() { .zinit-ice load"[[ \${MYPROMPT} = ${1} ]]" unload"[[ \${MYPROMPT} != ${1} ]]" \
atinit'[ -f "${thmf}/${MYPROMPT}-pre" ] && source "${thmf}/${MYPROMPT}-pre"' \
atload'![ -f "${thmf}/${MYPROMPT}-post" ] && source "${thmf}/${MYPROMPT}-post"'; \
ZINIT_ICE+=( "${(kv)ZINIT_ICES[@]}"); }
z()  { [ -z $2 ] && zinit light "${@}" || zinit "${@}"; } # zplugin

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
fi

# Load the secrets file
if [ -e ${HOME}/.secrets ]; then
    source ${HOME}/.secrets
fi

{% if ansible_facts['os_family'] == "Darwin" %}
eval "$(/usr/libexec/path_helper -s)"
{% endif %}

# Homebrew
{% if ansible_facts['os_family'] == "Darwin" %}
BREW_PREFIX={{ brew_prefix }}
export MANPATH="{{ zsh_man_path | join(":") }}:${MANPATH}"
{% endif %}
##############################################################
# GLOBAL CONFIG
##############################################################

# ASDF
. ${HOME}/.asdf/asdf.sh

# Homebrew options
{% if ansible_facts['os_family']|lower == "darwin" %}
export HOMEBREW_INSTALL_BADGE="⚗️"
export HOMEBREW_NO_ANALYTICS=1
{% endif %}

# FZF
[[ -f ${HOME}/.fzf.zsh ]] && . ${HOME}/.fzf.zsh
# Base16 {{ base16.theme[default_theme]['scheme_name'] }}
# Author: {{ base16.theme[default_theme]['scheme_author'] }}

_gen_fzf_default_opts() {

local color00='#{{ base16.theme[default_theme]['base00_hex'] }}'
local color01='#{{ base16.theme[default_theme]['base01_hex'] }}'
local color02='#{{ base16.theme[default_theme]['base02_hex'] }}'
local color03='#{{ base16.theme[default_theme]['base03_hex'] }}'
local color04='#{{ base16.theme[default_theme]['base04_hex'] }}'
local color05='#{{ base16.theme[default_theme]['base05_hex'] }}'
local color06='#{{ base16.theme[default_theme]['base06_hex'] }}'
local color07='#{{ base16.theme[default_theme]['base07_hex'] }}'
local color08='#{{ base16.theme[default_theme]['base08_hex'] }}'
local color09='#{{ base16.theme[default_theme]['base09_hex'] }}'
local color0A='#{{ base16.theme[default_theme]['base0A_hex'] }}'
local color0B='#{{ base16.theme[default_theme]['base0B_hex'] }}'
local color0C='#{{ base16.theme[default_theme]['base0C_hex'] }}'
local color0D='#{{ base16.theme[default_theme]['base0D_hex'] }}'
local color0E='#{{ base16.theme[default_theme]['base0E_hex'] }}'
local color0F='#{{ base16.theme[default_theme]['base0F_hex'] }}'

export FZF_DEFAULT_OPTS="
--color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D
--color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C
--color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D
"

}

_gen_fzf_default_opts

export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview '(highlight -O ansi -l {} 2> /dev/null || cat {} || tree -C {}) 2> /dev/null | head -200'"
export FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap --bind '?:toggle-preview' --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort' --header 'Press CTRL-Y to copy command into clipboard' --border"
export FZF_TMUX_HEIGHT="30%"

# Enhanced
ENHANCD_FILTER='fzf --height 50% --reverse --ansi'
export ENHANCD_DOT_SHOW_FULLPATH=1;
export ENHANCD_FILTER

# ssh_agent
eval "$(ssh-agent -s)" >/dev/null
ssh-add -K &> /dev/null

WORDCHARS=${WORDCHARS//[\/]}

export PAGER=less

# Python
export PYTHONSTARTUP="${HOME}/.pyrc.py"

# Gpg2
export GPG_TTY=$(tty)

fast-theme default 2> /dev/null

# Z
export _Z_CMD=z

# GCLOUD
export CLOUDSDK_PYTHON=python3

{% if ansible_facts['os_family']|lower == "darwin" %}
export PATH="{{ zsh_path | join(":") }}:{{ zsh_mac_path | join(":") }}:${PATH}"
{% elif ansible_facts['os_family']|lower == "debian" %}
export PATH="{{ zsh_path | join(":") }}:{{ zsh_debian_path | join(":") }}:${PATH}"
{% elif ansible_facts['os_family']|lower == "archlinux" %}
export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib
export MAKEFLAGS="-j9 -l8"
export PATH="{{ zsh_path | join(":") }}:{{ zsh_arch_path | join(":") }}:${PATH}"
{% endif %}

# Rust
export CARGO_HOME="${HOME}/.cargo"
export PATH="${CARGO_HOME}:${PATH}"
if [[ "${+commands[rustc]}" == 1 ]]; then
export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"
fi

# Go
export ASDF_ROOT="${HOME}/.asdf"
export GOROOT="${HOME}/.asdf/installs/golang/1.13.7/go"
export GOPATH="${HOME}/go"
export PATH="${GOROOT}/bin:${ASDF_ROOT}/shims:${PATH}"


# Google Cloud SDK
{% if ansible_facts['os_family']|lower == "darwin" %}
export CLOUDSDK_ROOT_DIR="{{ brew_prefix }}/Caskroom/google-cloud-sdk/latest/google-cloud-sdk"
{% else %}
. "${CLOUDSDK_ROOT_DIR}/path.zsh.inc"
{% endif %}

##############################################################
# ZINIT https://github.com/zdharma/zinit
##############################################################

ZINIT_PATH="${HOME}/.zinit"
if [[ ! -f ${ZINIT_PATH}/bin/zinit.zsh ]]; then
if (( $+commands[git] )); then
    git clone https://github.com/zdharma/zinit.git ${ZINIT_PATH}/bin
else
    echo 'git not found' >&2
    exit 1
    fi
fi

source ${ZINIT_PATH}/bin/zinit.zsh

autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Do not load the prompt asynchronously since it's super fast anyways!
# Theme options

# PROMPT
setopt promptsubst
zinit ice depth=1 atload'!source ${ZDOTDIR}/prompt.zsh; _p9k_precmd' nocd
zinit light romkatv/powerlevel10k

# Turbo 0a
zt 0a light-mode for \
        OMZ::plugins/python/python.plugin.zsh \
        OMZ::plugins/virtualenv/virtualenv.plugin.zsh \
        OMZ::plugins/archlinux/archlinux.plugin.zsh \
        OMZ::plugins/urltools/urltools.plugin.zsh \
        OMZ::plugins/nmap/nmap.plugin.zsh \
        OMZ::plugins/kubectl/kubectl.plugin.zsh \
        OMZ::plugins/asdf/asdf.plugin.zsh \
        OMZ::plugins/tmux/tmux.plugin.zsh \
        OMZ::plugins/extract/extract.plugin.zsh \
        OMZ::plugins/command-not-found/command-not-found.plugin.zsh \
        OMZ::plugins/gcloud/gcloud.plugin.zsh \
        skx/sysadmin-util \
        rimraf/k \
    as"program" pick"zsh-better-npm-completion.plugin.zsh" \
        lukechilds/zsh-better-npm-completion \
    has'git' pick'init.zsh' atload'alias gi="git-ignore"' blockf \
        laggardkernel/git-ignore \
    make!"!PREFIX=$ZPFX" \
    atclone"cp build/def-* $ZPFX/bin/" \
        sei40kr/zsh-fast-alias-tips \
    compile'{hsmw-*,test/*}' \
        zdharma/history-search-multi-word \
    has'git-extras' \
        https://github.com/tj/git-extras/blob/master/etc/git-extras-completion.zsh

## Turbo 0b
zt 0b light-mode for \
        OMZ::lib/git.zsh \
    atload"unalias grv" lucid \
        OMZ::plugins/git/git.plugin.zsh \
    has'man' \
        ael-code/zsh-colored-man-pages \
    has'notify-send' atload'AUTO_NOTIFY_THRESHOLD=300; AUTO_NOTIFY_IGNORE+=( "cht.sh" "cht" "lazydocker" "lazygit" "tmux" "yarn" "vagrant ssh" )' \
        MichaelAquilina/zsh-auto-notify \
    as"program" pick"bin/git-dsf" \
        zdharma/zsh-diff-so-fancy \
    as'program' pick"$ZPFX/bin/(fzf|fzf-tmux)" \
    atclone"cp shell/completion.zsh _fzf_completion; \
    cp bin/(fzf|fzf-tmux) $ZPFX/bin; \
    PREFIX=$ZPFX ./install" \
    atload"source $HOME/.fzf.zsh" \
        junegunn/fzf

zt 0b light-mode for \
    as"null" \
    pick"init.sh" \
    atload"ENHANCD_FILTER='fzf --height 50% --reverse --ansi'" \
    atinit"ENHANCD_DOT_SHOW_FULLPATH=1; export ENHANCD_FILTER; export ENHANCD_DOT_SHOW_FULLPATH" \
        b4b4r07/enhancd

zinit ice wait'2b' lucid atinit'local file; for i in bindings generic history dir completions; do source "$i.zsh"; done'
zinit light ${ZDOTDIR}

# Turbo 0c and OS dependent
{% if ansible_facts['os_family']|lower == "darwin" %}
zinit svn wait"0c" lucid
zinit snippet OMZ::plugins/osx
{% endif %}

{% if ansible_facts['distribution']|lower == "debian" %}
zinit wait"0c" lucid
zinit snippet OMZ::plugins/debian/debian.plugin.zsh
{% endif %}

{% if ansible_facts['distribution']|lower == "ubuntu" %}
zinit wait"0c" lucid
zinit snippet OMZ::plugins/ubuntu/ubuntu.plugin.zsh
{% endif %}

# fzy

zinit wait"1" lucid as"program" pick"$ZPFX/bin/fzy*" \
atclone"cp contrib/fzy-* $ZPFX/bin/" \
make"!PREFIX=$ZPFX install" for \
jhawthorn/fzy

zcommand cp"httpstat.sh -> httpstat" pick"httpstat"
zlight b4b4r07/httpstat

#### COMPLETION SNIPPETS
#######################################################################################################
# Completion for Docker
zinit ice wait"2a" lucid as'completion'
zsnippet https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

# Docker Compose
zinit ice wait"2a" lucid as'completion'
zsnippet https://github.com/docker/compose/blob/master/contrib/completion/zsh/_docker-compose

# kubectl
zinit ice wait"2a" lucid as'completion' for \
zsnippet https://github.com/nnao45/zsh-kubectl-completion/blob/master/_kubectl

# completion for extract
zinit ice wait"2a" lucid as'completion'
zsnippet https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/extract/_extract


#######################################################################################################

# local snippets
zinit ice wait'2b' lucid atinit'local file; for file in *.zsh; do source "$file"; done'
zinit light ${ZDOTDIR}/functions

#################################################################
# IMPORTANT PLUGINS

# Fast-syntax-highlighting & autosuggestions
zinit wait'2c' lucid for \
    atinit"ZINIT[COMPINIT_OPTS]=-C; zpcompinit; zpcdreplay" \
        zdharma/fast-syntax-highlighting \
    atload"!_zsh_autosuggest_start" \
    atinit"export ZSH_AUTOSUGGEST_USE_ASYNC=1; export ZSH_AUTOSUGGEST_MANUAL_REBIND=1; export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20" \
        zsh-users/zsh-autosuggestions \
    blockf \
        zsh-users/zsh-completions

# history-substring-search for smarter up/down arrow
# MUST be after fast-syntax-highlighting
zinit wait'2d' lucid atload'setup_history_substring_search' nocd
zinit light zsh-users/zsh-history-substring-search

setup_history_substring_search() {
    export HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND=''
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down
}

{% if ansible_facts['os_family'] == "Darwin" %}
# The next line updates PATH for the Google Cloud SDK.
. "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"

# The next line enables shell command completion for gcloud.
. "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"
{% else %}
# The next line updates PATH for the Google Cloud SDK.
if [ -f '/usr/local/bin/google-cloud-sdk/path.zsh.inc' ]; then . '/usr/local/bin/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/usr/local/bin/google-cloud-sdk/completion.zsh.inc' ]; then . '/usr/local/bin/google-cloud-sdk/completion.zsh.inc'; fi
{% endif %}

if (( ${+ztermtitle} )); then
    case ${TERM} in
        xterm*|*st)
        precmd() { print -Pn "\e]0;${ztermtitle}\a" }
        precmd  # we execute it once to initialize the window title
        ;;
    esac
fi

# aliases
{% for alias in zsh_aliases %}
    {% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
    {% endif %}
{% endfor %}

{% for alias in zsh_misc_aliases %}
    {% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
    {% endif %}
{% endfor %}

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    alias "$method"="lwp-request -m '$method'"
done

# ruby aliases
{% for alias in zsh_ruby_aliases %}
    {% if alias.alias != '' %}
alias {{ alias.alias }}='{{ alias.action }}'
    {% endif %}
{% endfor %}

# python aliases
{% for alias in zsh_python_aliases %}
    {% if alias.alias != '' %}
alias {{ alias.alias }}='{{ alias.action }}'
    {% endif %}
{% endfor %}

{% if ansible_facts['os_family']|lower == "archlinux" or  ansible_facts['os_family']|lower == "debian" %}
# linux only aliases
    {% for alias in zsh_linux_aliases %}
        {% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
        {% endif %}
    {% endfor %}
{% endif %}

{% if ansible_facts['os_family']|lower == "darwin" %}
# mac only aliases
    {% for alias in zsh_mac_aliases %}
        {% if alias.alias != '' %}
alias '{{ alias.alias }}'="{{ alias.action }}"
        {% endif %}
    {% endfor %}
{% endif %}

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

zstyle ':completion:*' insert-tab pending


#################################################################
# REMOVE TEMPORARY FUNCTIONS
#
unset -f zlight
unset -f zcommand
unset -f zsnippet
unset -f zt
unset -f z

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
# shellcheck disable=SC1090
[ -f ${HOME}/.localrc ] && . ${HOME}/.localrc

### After the last of the compdefs

{ # idea totally stolen from prezto
# Compile the completion dump to increase startup speed.
zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
if [[ -s "$zcompdump" && (! -s "${zcompdump}.zwc" || "$zcompdump" -nt "${zcompdump}.zwc") ]]; then
    zcompile "$zcompdump"
fi
} &!

(( ! ${+functions[p10k]} )) || p10k finalize
